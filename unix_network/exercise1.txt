1. 在系统上验证，除根目录外，目录.和..是不同的
.（当前目录）和 ..（上级目录）的 inode 号不同，说明它们是不同的目录入口。
.. 指向 上一级目录，而 . 指向 当前目录。
在 / 目录下，. 和 .. 是相同的 inode 号，因为根目录的父目录仍然是它自己。

2. 分析图1-6程序的输出，说明进程ID为852和853的进程发生了什么情况?
ps 或 pstree 来查看进程状态
./a.out 每次执行，都会创建新的进程，因此 getpid() 的返回值会变化。
进程 ID 通常递增，但可能不连续，因为其他进程（如 shell、系统进程）可能占用了中间的 ID。
这就是为什么 ./a.out 第一次是 851，第二次是 854（而不是 852、853）。

3. 在1.7节中，perror的参数是用ISOC的属性const定义的，而strerror的整型参数没有用此属性定义，为什么?
strerror() 通过 errnum 查找错误消息，并返回一个字符串指针，不会修改 errnum 的值。
int 变量本身就是不可修改的值传递，所以 const 关键字不会增加额外的保护。
perror() 只读取 s 的内容，不会对其进行修改

ps: linux查看错误命令
 - 使用 errno -l（推荐，直接列出所有错误码）
 - 使用 man 3 errno
 - 使用 strerror 命令查询特定错误
 ```bash
 strerror 2
 ```

4. 若日历时间存放在带符号的32位整型数中，那么到哪一年它将溢出?
int32_t 是带符号的 32 位整数，范围为-2^31 -1 到 2^31 -1, 即-2147483647~~~2147483647
时间戳 0 对应的是 1970-01-01 00:00:00 UTC
最大值 2,147,483,647 对应的日期

```bash
date -ud @2147483647
Tue Jan 19 03:14:07 UTC 2038
```
如果时间存储在 int32_t（带符号 32 位整数）中，它将在 2038 年 1 月 19 日 03:14:07 UTC 溢出，导致时间回绕到 1901 年


4.1 如何扩展溢出的浮点数？
从 float（32 位）升级到 double（64 位）
从 double（64 位）升级到 long double（通常 80 位或 128 位，取决于架构）
使用 __float128（128 位）或第三方库（如 MPFR）
✅ 兼容大多数现有代码，但：

long double 在不同架构上的实现可能不同（如 x86 vs ARM）。
可能需要修改代码以适配更大的数据类型。
```c
float a = 1e38;       // 可能溢出
double b = a;         // 迁移到 double，防止溢出
long double c = b;    // 进一步扩展范围

```

一般应用：升级 double 或 long double。
科学计算：使用 IEEE 754 特殊值，避免崩溃。
金融计算：使用定点数（Fixed-Point）。
极高精度计算：使用 MPFR 或 GMP。

5. 若进程时间存放在带符号的 32位整型数中，而且每秒为100时钟滴，那么经过多少天后该时间值将会溢出?
如果进程时间存放在 int32_t 且时钟滴频率为 100 ticks/sec，那么大约 248.5 天后（约 8 个月），时间值将会溢出